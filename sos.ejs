<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SOS Page</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin-top: 30px;
            padding: 0;
        }
        .main {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .header, .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        button {
            margin-bottom:5px;
            padding: 10px 15px;
            background-color: #007BFF;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        select {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin: 10px 0;
        }
        .map-container {
            height: 400px;
            margin-top: 20px;
        }
        .header1 {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: #333; 
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            margin-bottom: 5px;
        }
        .header1 .logo span {
            color: white;
            font-size: 24px;
            font-weight: bold;
        }
        
        .header1 .nav-links {
            display: flex;
            gap: 20px;
        }
        
        .header1 .nav-links a {
            color: white;
            text-decoration: none;
            padding: 10px;
            font-size: 16px;
        }
        
        .header1 .nav-links a:hover {
            background-color: #444;
            border-radius: 4px;
        }
        body {
            margin-top: 60px; 
        }

        .chatbot-container {
            width: 90%;
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        #chat-box {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        #chat-history {
            height: 200px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
            background-color: #fff;
        }

        #user-input {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        #send-btn {
            background-color: #007BFF;
            color: white;
            padding: 10px 15px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }  
    </style>
</head>
<body>
    
<div class="main">
    <header class="header1">
        <div class="logo">
          <span>SnakeShield</span>
        </div>
        <div class="nav-links">
          <a href="/profile">Profile</a>
          <a href="/sos">SOS</a>
          <a href="/identify">Identify</a>
          <!-- <a href="/contacts">Contacts</a> -->
        </div>
      </header>
    <div class="header">
        <button id="sos-btn" >Send SOS</button>
    </div>

    <div class="controls">
        <button id="show-hospitals-btn">Show Nearby Hospitals</button>
        <div>
            <select id="radius-dropdown" hidden>
                <option value="5000">5 km</option>
                <option value="10000">10 km</option>
                <option value="20000" selected>20 km</option>
                <option value="50000">50 km</option>
            </select>
            <select id="hospital-dropdown" hidden>
                <option value="" disabled selected>Select a hospital</option>
            </select>
        </div>
    </div>
    <div id="map" class="map-container"></div>
</div>

<div class="chatbot-container">
    <h2>Snakebite Aid Chatbot</h2>
    <div id="chat-box">
        <div id="chat-history">
          
        </div>
        <input type="text" id="user-input" placeholder="What to do in case of snake bite?" />
        <button id="send-btn">Send</button>
    </div>
</div>


<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
<script>
    let map, userLocationMarker, routingControl;
    let userLocation = null;


    const sosBtn = document.getElementById('sos-btn');
    const showHospitalsBtn = document.getElementById('show-hospitals-btn');
    const radiusDropdown = document.getElementById('radius-dropdown');
    const hospitalDropdown = document.getElementById('hospital-dropdown');

    // Handle SOS Button Click
    sosBtn.addEventListener('click', async () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(async (position) => {
                const { latitude, longitude } = position.coords;
                userLocation = { lat: latitude, lng: longitude };

                const emergencyNumber = '+919369326907';  // Replace with the actual emergency number
                const sosMessage = `Emergency! I'm at latitude: ${latitude}, longitude: ${longitude} bit by a snake. Please send help!`;

                fetch('/send-sms', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        phone: emergencyNumber, 
                        message: sosMessage 
                    })
                })
                .then(response => response.json())
                .then(data => alert(data.message || 'SOS sent successfully!'))
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to send SOS. Please try again.');
                });
            });
        } else {
            alert('Geolocation is not supported by your browser.');
        }
    });

    // Initialize map
    function initMap() {
        map = L.map('map').setView([0, 0], 14);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                userLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                map.setView([userLocation.lat, userLocation.lng], 14);
                userLocationMarker = L.marker([userLocation.lat, userLocation.lng])
                    .addTo(map)
                    .bindPopup('Your Location')
                    .openPopup();
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    // Calculate distance between two coordinates
    function calculateDistance(coord1, coord2) {
        const R = 6371; // Radius of the Earth in km
        const dLat = (coord2.lat - coord1.lat) * Math.PI / 180;
        const dLon = (coord2.lon - coord1.lon) * Math.PI / 180;
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                  Math.cos(coord1.lat * Math.PI / 180) * Math.cos(coord2.lat * Math.PI / 180) *
                  Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // Distance in km
    }

    // Fetch nearby hospitals
    function findNearbyHospitals(location, radius) {
        const query = `
            [out:json];
            node["amenity"="hospital"](around:${radius}, ${location.lat}, ${location.lng});
            out body;
        `;
        const overpassUrl = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(query)}`;

        fetch(overpassUrl)
            .then(response => response.json())
            .then(data => {
                const hospitals = data.elements.map(hospital => ({
                    name: hospital.tags.name || 'Unnamed Hospital',
                    lat: hospital.lat,
                    lon: hospital.lon,
                    distance: calculateDistance(location, { lat: hospital.lat, lon: hospital.lon })
                })).sort((a, b) => a.distance - b.distance);

                populateHospitalDropdown(hospitals);
                markHospitalsOnMap(hospitals);
            })
            .catch(err => console.error("Error fetching hospitals:", err));
    }

    // Populate hospital 
    function populateHospitalDropdown(hospitals) {
        hospitalDropdown.innerHTML = '<option value="" disabled selected>Select a hospital</option>';
        hospitals.forEach((hospital, index) => {
            const option = document.createElement('option');
            option.value = index;
            option.textContent = `${hospital.name} (${hospital.distance.toFixed(2)} km)`;
            hospitalDropdown.appendChild(option);
        });
        hospitalDropdown.hidden = false;

        hospitalDropdown.addEventListener('change', (event) => {
            const selectedHospital = hospitals[event.target.value];
            if (selectedHospital) {
                showRouteToHospital([selectedHospital.lat, selectedHospital.lon]);
            }
        });
    }

    // Mark hospitals
    function markHospitalsOnMap(hospitals) {
        hospitals.forEach(hospital => {
            L.marker([hospital.lat, hospital.lon])
                .addTo(map)
                .bindPopup(hospital.name);
        });
    }

    // Display route
    function showRouteToHospital(destination) {
        if (routingControl) {
            map.removeControl(routingControl);
        }

        routingControl = L.Routing.control({
            waypoints: [
                L.latLng(userLocation.lat, userLocation.lng),
                L.latLng(destination[0], destination[1])
            ],
            routeWhileDragging: true
        }).addTo(map);
    }

    // Show Nearby Hospitals
    showHospitalsBtn.addEventListener('click', () => {
        if (userLocation) {
            radiusDropdown.hidden = false;
            radiusDropdown.addEventListener('change', () => {
                const selectedRadius = radiusDropdown.value;
                findNearbyHospitals(userLocation, selectedRadius);
            });
        } else {
            alert('Unable to fetch your location. Please enable location services.');
        }
    });

    window.onload = initMap;

    //chatbot
    const chatHistory = document.getElementById("chat-history");
    const userInput = document.getElementById("user-input");
    const sendBtn = document.getElementById("send-btn");

    userInput.value = "What to do in case of a snake bite?";

    sendBtn.addEventListener("click", async () => {
        const userMessage = userInput.value.trim();
        if (!userMessage) return;

        appendMessage("You", userMessage);
        userInput.value = "";

        try {
            
            const response = await fetch("http://localhost:8080/ask", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ question: userMessage }),
            });

            const data = await response.json();

            appendMessage("Bot", data.response);

            speakText(data.response);
        } catch (error) {
            console.error("Error:", error);
            appendMessage("Bot", "Failed to fetch a response. Please try again.");
        }
    });

    function appendMessage(role, message) {
        const messageElement = document.createElement("div");
        messageElement.textContent = `${role}: ${message}`;
        chatHistory.appendChild(messageElement);
        chatHistory.scrollTop = chatHistory.scrollHeight; 
    }

    function speakText(text) {
        const utterance = new SpeechSynthesisUtterance(text);
        window.speechSynthesis.speak(utterance);
    }
</script>
</body>
</html>
